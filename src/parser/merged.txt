// File: expansion.c
/* ************************************************************************** */

#include "../../include/parser.h"

bool	is_name_character(char c)
{
	if (ft_isalnum(c) || c == '_')
		return (true);
	else
		return (false);
}

char	*get_env_str(char *str, size_t *len)
{
	size_t	i;
	char	*env_str;

	*len = 0;
	i = 0;
	while (str[i] != '\0')
	{
		if (is_name_character(str[i]) == false)
		{
			break ;
		}
		i += 1;
	}
	env_str = (char *)malloc(sizeof(char) * (i + 1));
	*len = i;
	i = 0;
	while (i < *len)
	{
		env_str[i] = str[i];
		i += 1;
	}
	env_str[i] = '\0';
	return (env_str);
}

char	*replace_to_env_val(char *str, char *env_str)
{
	size_t	env_str_len;
	size_t	new_len;
	size_t	env_val_len;
	char	*env_val;
	char	*new_str;
	size_t	i;
	char	*str_bef;

	str_bef = str;
	env_str_len = strlen(env_str);
	env_val = getenv(env_str);
	if (env_val == NULL)
		env_val_len = 0;
	else
		env_val_len = strlen(env_val);
	new_len = strlen(str) - env_str_len - 1 + env_val_len;
	new_str = (char *)malloc(sizeof(char) * (new_len + 1));
	i = 0;
	while (*str)
	{
		if (*str == '$' && strncmp(str + 1, env_str, env_str_len) == 0)
		{
			ft_strcpy(&new_str[i], env_val);
			i += env_val_len;
			str += (env_str_len + 1);
		}
		else
		{
			new_str[i] = *str;
			str += 1;
			i += 1;
		}
	}
	new_str[i] = '\0';
	free(env_str);
	free(str_bef);
	return (new_str);
}

char	*expansion(char *str)
{
	char	*env_str;
	size_t	len;
	size_t	i;
	// char	*str_temp;

	i = 0;
	if (str == NULL)
		return (NULL);
	if (str[0] == '\'')
		return (str);
	while (str[i])
	{
		if (str[i] == '$')
		{
			if (!(str[i + 1] == '\0' || is_blank(str[i + 1])))
			{
				env_str = get_env_str(&str[i + 1], &len);
				str = replace_to_env_val(str, env_str);
				i = -1;
			}
		}
		i += 1;
	}
	return (str);
}



// File: linked_list.c
/* ************************************************************************** */

#include "../../include/parser.h"

// for test
void	linked_list_print(t_linked_list *list_head)
{
	t_linked_list	*ptr_temp;

	ptr_temp = list_head->next;
	while (ptr_temp)
	{
		printf("%s\n", ptr_temp->content);
		ptr_temp = ptr_temp->next;
	}
}

// for test
void	linked_list_print_with_token(t_linked_list *list_head)
{
	t_linked_list *ptr_temp;

	ptr_temp = list_head->next;
	while (ptr_temp)
	{
		printf("token type: %d\n", ptr_temp->token_type);
		printf("%s\n", ptr_temp->content);
		ptr_temp = ptr_temp->next;
	}
}

void	linked_list_free(t_linked_list *list_head)
{
	t_linked_list *temp;
	t_linked_list *current;

	current = list_head;
	while (current != NULL)
	{
		temp = current->next;
		if (current->content)
			free(current->content);
		free(current);
		current = temp;
	}
}

void	linked_list_append(t_linked_list *list_head, char *str)
{
	t_linked_list	*ptr_temp;
	t_linked_list *new_node = NULL;
    new_node = linked_list_init(new_node);
	new_node->content = strdup(str);
	if (list_head->next == NULL)
	{
		list_head->next = new_node;
	}
	else
	{
		ptr_temp = list_head;
		while (ptr_temp->next != NULL)
		{
			ptr_temp = ptr_temp->next;
		}
		ptr_temp->next = new_node;
	}
}

t_linked_list	*linked_list_init(t_linked_list *new_node)
{
	new_node = (t_linked_list *)malloc(sizeof(t_linked_list));
	new_node->content = NULL;
	new_node->next = NULL;
	new_node->token_type = TYPE_DEFAULT;
	return (new_node);
}

// File: main.c
    printf("Input: \"%s\"\n", input);

    // パーサーを実行
    head = parser(input);

    // リンクリストの内容とトークンタイプを表示
    linked_list_print_with_token(head);

    // メモリ解放
    linked_list_free(head);
    // ※適切なメモリ解放関数を実装して使用してください。
}

int main(void)
{
    // テストケース
    run_test("Test 1: Basic command with pipe", "ls | grep \"file\" | wc -l");
    run_test("Test 2: Redirection", "cat input.txt > output.txt");
    run_test("Test 3: Double quotes and variables", "echo \"User: $USER\"");
    run_test("Test 4: Single quotes (no expansion)", "echo '$USER is not expanded here'");
    run_test("Test 5: Complex command", "echo \"The file is $FILE\" && rm -f $FILE");
    run_test("Test 6: Multiple spaces and tabs", "    echo    \"Hello\"   | cat -e\t");
    run_test("Test 7: No variables", "ls -la");
    run_test("Test 8: Empty string", "");

    return 0;
}


// File: parser.c
/* ************************************************************************** */

#include "../../include/parser.h"

t_linked_list	remove_quotes_from_tokens(t_linked_list *list_head)
{
	t_linked_list	*ptr_temp;

	ptr_temp = list_head->next;
	while (ptr_temp)
	{
		if (ptr_temp->token_type == TYPE_COMMAND)
		{
			ptr_temp->content = remove_quote(ptr_temp->content);
		}
		ptr_temp = ptr_temp->next;
	}
	return *list_head;  // list_headの値を返す
}

void	expand_env_variables_in_list(t_linked_list *list_head)
{
	t_linked_list	*ptr_temp;

	ptr_temp = list_head->next;
	while (ptr_temp)
	{
		ptr_temp->content = expansion(ptr_temp->content);
		ptr_temp = ptr_temp->next;
	}
}

t_linked_list *parser(char *input)
{
    t_linked_list *head;

	head = NULL;
    head = linked_list_init(head);
    tokenize_input(head, input); // トークン化処理を呼び出し
    assign_token_types(head);
    expand_env_variables_in_list(head);
    remove_quotes_from_tokens(head);
    return (head);
}


// File: remove_quote.c
/* ************************************************************************** */

#include "../../include/parser.h"

size_t	remove_quote_get_newlen(char *str)
{
	size_t	new_len;
	size_t	i;

	int state; // 0:outside quote, 1:inside single quote, 2: inside double quote
	new_len = 0;
	i = 0;
	state = 0;
	while (str[i])
	{
		if (state == 0)
		{
			if (str[i] == '\'')
				state = 1;
			else if (str[i] == '\"')
				state = 2;
			else
				new_len += 1;
		}
		else if (state == 1)
		{
			if (str[i] == '\'')
				state = 0;
			else
				new_len += 1;
		}
		else if (state == 2)
		{
			if (str[i] == '\"')
				state = 0;
			else
				new_len += 1;
		}
		i += 1;
	}
	return (new_len);
}

char	*remove_quote(char *str)
{
	char	*new_str;
	size_t	new_len;
	size_t	i;
	size_t	j;

	int state; // 0:outside quote, 1:inside single quote, 2: inside double quote
	new_len = remove_quote_get_newlen(str);
	new_str = (char *)malloc(sizeof(char) * (new_len + 1));
	i = 0;
	j = 0;
	state = 0;
	while (str[i])
	{
		if (state == 0)
		{
			if (str[i] == '\'')
				state = 1;
			else if (str[i] == '\"')
				state = 2;
			else
				new_str[j++] = str[i];
		}
		else if (state == 1)
		{
			if (str[i] == '\'')
				state = 0;
			else
				new_str[j++] = str[i];
		}
		else if (state == 2)
		{
			if (str[i] == '\"')
				state = 0;
			else
				new_str[j++] = str[i];
		}
		i += 1;
	}
	free(str);
	new_str[j] = '\0';
	return (new_str);
}




// File: tokenize.c
/* ************************************************************************** */

#include "../../include/parser.h"

TokenType	get_token_type(char *str)
{
	if (strcmp(str, "|") == 0)
		return (TYPE_PIPE);
	if (strcmp(str, "<") == 0)
		return (TYPE_REDIRECT_IN);
	if (strcmp(str, ">") == 0)
		return (TYPE_REDIRECT_OUT);
	if (strcmp(str, "<<") == 0)
		return (TYPE_HEREDOC);
	if (strcmp(str, ">>") == 0)
		return (TYPE_REDIRECT_APPEND);
	return (TYPE_COMMAND);
}

void	assign_token_types(t_linked_list *list_head)
{
	t_linked_list *ptr_temp;

	ptr_temp = list_head->next;
	while(ptr_temp)
	{
		ptr_temp->token_type = get_token_type(ptr_temp->content);
		ptr_temp = ptr_temp->next;
	}
}

// not implementing here doc for now
int	is_delimeter(char *str)
{
	if (str[0] == '\0')
		return (0);
	if (str[0] == '>' && str[1] == '>')
		return (2);
	if (str[0] == '<' && str[1] == '<')
		return (2);
	if (*str == '|' || *str == '<' || *str == '>')
		return (1);
	return (0);
}

size_t	split_len(char *input)
{
	bool	inside_single_quote;
	bool	inside_double_quote;
	size_t	len;

	inside_single_quote = false;
	inside_double_quote = false;
	len = 0;
	// while (*input != '\0' && is_blank(*input))
	// 	input += 1;
	if (is_delimeter(input) != 0)
		return (is_delimeter(input));
	while (input[len])
	{
		if (input[len] == '\'')
			inside_single_quote = !inside_single_quote;
		if (input[len] == '\"')
			inside_double_quote = !inside_double_quote;
		if (inside_double_quote == false && inside_single_quote == false)
		{
			if (is_delimeter(&(input[len])) != 0)
				return (len);
			if (is_blank(input[len]))
				return (len);
		}
		len += 1;
	}
	return (len);
}

void tokenize_input(t_linked_list *head, char *input)
{
    size_t len;
    char *str_temp;

    while (*input != '\0')
    {
        while (*input != '\0' && is_blank(*input))
            input += 1;
        if (*input == '\0')
            break;
        len = split_len(input);
        str_temp = strdup_len(input, len);
        linked_list_append(head, str_temp);
        input += len;
    }
}




// File: utils.c
/* ************************************************************************** */

#include "../../include/parser.h"

char	*strdup_len(char *str, size_t n)
{
	char	*ret_str;
	size_t	i;

	ret_str = (char *)malloc(sizeof(char) * (n + 1));
	i = 0;
	while (i < n)
	{
		ret_str[i] = str[i];
		i += 1;
	}
	ret_str[i] = '\0';
	return (ret_str);
}

bool	is_blank(char c)
{
	if (c == ' ' || c == '\t' || c == '\n')
		return (true);
	else
		return (false);
}

void	ft_strcpy(char *dst, char *src)
{
	if (dst == NULL || src == NULL)
		return ;
	while (*src)
	{
		*dst = *src;
		dst += 1;
		src += 1;
	}
}




