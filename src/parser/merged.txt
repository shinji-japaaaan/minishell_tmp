// File: expansion.c
/* ************************************************************************** */

#include "libft.h"
#include "parser.h"

bool	is_name_character(char c)
{
	if (ft_isalnum(c) || c == '_')
		return (true);
	else
		return (false);
}

char	*get_env_str(char *str, size_t *len)
{
	size_t	i;
	char	*env_str;

	*len = 0;
	i = 0;
	while (str[i] != '\0')
	{
		if (is_name_character(str[i]) == false)
		{
			break ;
		}
		i += 1;
	}
	env_str = (char *)malloc(sizeof(char) * (i + 1));
	*len = i;
	i = 0;
	while (i < *len)
	{
		env_str[i] = str[i];
		i += 1;
	}
	env_str[i] = '\0';
	return (env_str);
}

void	ft_strcpy(char *dst, char *src)
{
	if (dst == NULL || src == NULL)
		return ;
	while (*src)
	{
		*dst = *src;
		dst += 1;
		src += 1;
	}
}

char	*replace_to_env_val(char *str, char *env_str)
{
	size_t	env_str_len;
	size_t	new_len;
	size_t	env_val_len;
	char	*env_val;
	char	*new_str;
	size_t	i;
	char	*str_bef;

	str_bef = str;
	env_str_len = strlen(env_str);
	env_val = getenv(env_str);
	if (env_val == NULL)
		env_val_len = 0;
	else
		env_val_len = strlen(env_val);
	new_len = strlen(str) - env_str_len - 1 + env_val_len;
	new_str = (char *)malloc(sizeof(char) * (new_len + 1));
	i = 0;
	while (*str)
	{
		if (*str == '$' && strncmp(str + 1, env_str, env_str_len) == 0)
		{
			ft_strcpy(&new_str[i], env_val);
			i += env_val_len;
			str += (env_str_len + 1);
		}
		else
		{
			new_str[i] = *str;
			str += 1;
			i += 1;
		}
	}
	new_str[i] = '\0';
	free(env_str);
	free(str_bef);
	return (new_str);
}

char	*expansion(char *str)
{
	char	*env_str;
	size_t	len;
	size_t	i;
	// char	*str_temp;

	i = 0;
	if (str == NULL)
		return (NULL);
	if (str[0] == '\'')
		return (str);
	while (str[i])
	{
		if (str[i] == '$')
		{
			if (!(str[i + 1] == '\0' || is_blank(str[i + 1])))
			{
				env_str = get_env_str(&str[i + 1], &len);
				str = replace_to_env_val(str, env_str);
				i = -1;
			}
		}
		i += 1;
	}
	return (str);
}

// int	main(void)
// {
// 	char	*converted_str;
// 	char	*str;

// 	str = strdup("dsfjd  $oo  $USER# adfa $USER $AAA");
// 	converted_str = expansion(str);
// 	printf("%s\n", converted_str);
// }


// File: history.c
/* ************************************************************************** */

#include "../../include/minishell.h"

// 履歴リストを初期化
History *init_history(int max_size) {
    History *history = malloc(sizeof(History));
    if (!history) {
        perror("malloc");
        exit(EXIT_FAILURE);
    }
    history->entries = malloc(max_size * sizeof(char *));
    if (!history->entries) {
        free(history);
        perror("malloc");
        exit(EXIT_FAILURE);
    }
    history->count = 0;
    history->max_size = max_size;
    return history;
}

// 履歴リストに新しいエントリを追加
void add_to_history(History *history, const char *line) {
    if (history->count == history->max_size) {
        free(history->entries[0]);
        for (int i = 0; i < history->count - 1; i++) {
            history->entries[i] = history->entries[i + 1];
        }
        history->count--;
    }
    history->entries[history->count++] = strdup(line);
}

// 履歴をファイルに保存
void save_history_to_file(const char *filename, History *history) {
    int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd == -1) {
        perror("open");
        return;
    }

    for (int i = 0; i < history->count; i++) {
        write(fd, history->entries[i], strlen(history->entries[i]));
        write(fd, "\n", 1);
    }

    close(fd);
}

// ファイルから履歴を読み込み
void load_history_from_file(const char *filename, History *history) {
    int fd = open(filename, O_RDONLY);
    if (fd == -1) {
        return; // ファイルが存在しない場合はスキップ
    }

    char buffer[BUFFER_SIZE];
    ssize_t bytes;
    char *line;

    while ((bytes = read(fd, buffer, sizeof(buffer) - 1)) > 0) {
        buffer[bytes] = '\0';
        line = strtok(buffer, "\n");
        while (line) {
            add_to_history(history, line);
            add_history(line); // readlineの履歴にも追加
            line = strtok(NULL, "\n");
        }
    }

    close(fd);
}

// 履歴の解放
void free_history(History *history) {
    for (int i = 0; i < history->count; i++) {
        free(history->entries[i]);
    }
    free(history->entries);
    free(history);
}


// File: linked_list.c
/* ************************************************************************** */

#include "linked_list.h"
#include "parser.h"

t_linked_list	*linked_list_init(t_linked_list *new_node)
{
	new_node = (t_linked_list *)malloc(sizeof(t_linked_list));
	new_node->content = NULL;
	new_node->next = NULL;
	new_node->token_type = TYPE_DEFAULT;
	return (new_node);
}

void	linked_list_append(t_linked_list *list_head, char *str)
{
	t_linked_list	*ptr_temp;
	t_linked_list *new_node = NULL;
    new_node = linked_list_init(new_node);
	new_node->content = strdup(str);
	if (list_head->next == NULL)
	{
		list_head->next = new_node;
	}
	else
	{
		ptr_temp = list_head;
		while (ptr_temp->next != NULL)
		{
			ptr_temp = ptr_temp->next;
		}
		ptr_temp->next = new_node;
	}
}

void	linked_list_expansion(t_linked_list *list_head)
{
	t_linked_list	*ptr_temp;

	ptr_temp = list_head->next;
	while (ptr_temp)
	{
		ptr_temp->content = expansion(ptr_temp->content);
		ptr_temp = ptr_temp->next;
	}
}

// for test
void	linked_list_print(t_linked_list *list_head)
{
	t_linked_list	*ptr_temp;

	ptr_temp = list_head->next;
	while (ptr_temp)
	{
		printf("%s\n", ptr_temp->content);
		ptr_temp = ptr_temp->next;
	}
}

// for test
void	linked_list_print_with_token(t_linked_list *list_head)
{
	t_linked_list *ptr_temp;

	ptr_temp = list_head->next;
	while (ptr_temp)
	{
		printf("token type: %d\n", ptr_temp->token_type);
		printf("%s\n", ptr_temp->content);
		ptr_temp = ptr_temp->next;
	}
}

void	linked_list_free(t_linked_list *list_head)
{
	t_linked_list *temp;
	t_linked_list *current;

	current = list_head;
	while (current != NULL)
	{
		temp = current->next;
		if (current->content)
			free(current->content);
		free(current);
		current = temp;
	}
}


// File: parser.c
/* ************************************************************************** */

#include "linked_list.h"
#include "parser.h"

// char	*delete_blank_start_end(char *input)
// {
// 	size_t	len;

// 	while (is_blank(*input))
// 	{
// 		input += 1;
// 	}
// 	len = strlen(input);
// 	while (len >= 0 && is_blank(input[len]))
// 	{
// 		input[len] = '\0';
// 		len -= 1;
// 	}
// 	return (input);
// }

size_t	split_len(char *input)
{
	bool	inside_single_quote;
	bool	inside_double_quote;
	size_t	len;

	inside_single_quote = false;
	inside_double_quote = false;
	len = 0;
	// while (*input != '\0' && is_blank(*input))
	// 	input += 1;
	if (is_delimeter(input) != 0)
		return (is_delimeter(input));
	while (input[len])
	{
		if (input[len] == '\'')
			inside_single_quote = !inside_single_quote;
		if (input[len] == '\"')
			inside_double_quote = !inside_double_quote;
		if (inside_double_quote == false && inside_single_quote == false)
		{
			if (is_delimeter(&(input[len])) != 0)
				return (len);
			if (is_blank(input[len]))
				return (len);
		}
		len += 1;
	}
	return (len);
}

t_linked_list	*parser(char *input)
{
	char			*str_temp;
	size_t			len;

	t_linked_list *head = NULL;
	head = linked_list_init(head);
	while (*input != '\0')
	{
		while (*input != '\0' && is_blank(*input))
			input += 1;
		if (*input == '\0')
		 	break ;
		len = split_len(input);
		str_temp = strdup_len(input, len);
		linked_list_append(head, str_temp);
		input += len;
	}
	linked_list_tokenize(head);
	linked_list_expansion(head);
	linked_list_remove_quote(head);
	return (head);
}


// File: parser_utils.c
/* ************************************************************************** */

#include "linked_list.h"
#include "parser.h"

bool	is_blank(char c)
{
	if (c == ' ' || c == '\t' || c == '\n')
		return (true);
	else
		return (false);
}

// not implementing here doc for now
int	is_delimeter(char *str)
{
	if (str[0] == '\0')
		return (0);
	if (str[0] == '>' && str[1] == '>')
		return (2);
	if (str[0] == '<' && str[1] == '<')
		return (2);
	if (*str == '|' || *str == '<' || *str == '>')
		return (1);
	return (0);
}

char	*strdup_len(char *str, size_t n)
{
	char	*ret_str;
	size_t	i;

	ret_str = (char *)malloc(sizeof(char) * (n + 1));
	i = 0;
	while (i < n)
	{
		ret_str[i] = str[i];
		i += 1;
	}
	ret_str[i] = '\0';
	return (ret_str);
}


// File: remove_quote.c
/* ************************************************************************** */

#include "linked_list.h"
#include "parser.h"

size_t	remove_quote_get_newlen(char *str)
{
	size_t	new_len;
	size_t	i;

	int state; // 0:outside quote, 1:inside single quote, 2: inside double quote
	new_len = 0;
	i = 0;
	state = 0;
	while (str[i])
	{
		if (state == 0)
		{
			if (str[i] == '\'')
				state = 1;
			else if (str[i] == '\"')
				state = 2;
			else
				new_len += 1;
		}
		else if (state == 1)
		{
			if (str[i] == '\'')
				state = 0;
			else
				new_len += 1;
		}
		else if (state == 2)
		{
			if (str[i] == '\"')
				state = 0;
			else
				new_len += 1;
		}
		i += 1;
	}
	return (new_len);
}

char	*remove_quote(char *str)
{
	char	*new_str;
	size_t	new_len;
	size_t	i;
	size_t	j;

	int state; // 0:outside quote, 1:inside single quote, 2: inside double quote
	new_len = remove_quote_get_newlen(str);
	new_str = (char *)malloc(sizeof(char) * (new_len + 1));
	i = 0;
	j = 0;
	state = 0;
	while (str[i])
	{
		if (state == 0)
		{
			if (str[i] == '\'')
				state = 1;
			else if (str[i] == '\"')
				state = 2;
			else
				new_str[j++] = str[i];
		}
		else if (state == 1)
		{
			if (str[i] == '\'')
				state = 0;
			else
				new_str[j++] = str[i];
		}
		else if (state == 2)
		{
			if (str[i] == '\"')
				state = 0;
			else
				new_str[j++] = str[i];
		}
		i += 1;
	}
	free(str);
	new_str[j] = '\0';
	return (new_str);
}

t_linked_list	linked_list_remove_quote(t_linked_list *list_head)
{
	t_linked_list	*ptr_temp;

	ptr_temp = list_head->next;
	while (ptr_temp)
	{
		if (ptr_temp->token_type == TYPE_COMMAND)
		{
			ptr_temp->content = remove_quote(ptr_temp->content);
		}
		ptr_temp = ptr_temp->next;
	}
	return *list_head;  // list_headの値を返す
}


// File: tokenize.c
/* ************************************************************************** */

#include "linked_list.h"
#include "parser.h"

TokenType	get_token_type(char *str)
{
	if (strcmp(str, "|") == 0)
		return (TYPE_PIPE);
	if (strcmp(str, "<") == 0)
		return (TYPE_REDIRECT_IN);
	if (strcmp(str, ">") == 0)
		return (TYPE_REDIRECT_OUT);
	if (strcmp(str, "<<") == 0)
		return (TYPE_HEREDOC);
	if (strcmp(str, ">>") == 0)
		return (TYPE_REDIRECT_APPEND);
	return (TYPE_COMMAND);
}

void	linked_list_tokenize(t_linked_list *list_head)
{
	t_linked_list *ptr_temp;

	ptr_temp = list_head->next;
	while(ptr_temp)
	{
		ptr_temp->token_type = get_token_type(ptr_temp->content);
		ptr_temp = ptr_temp->next;
	}
}


// File: unified_test.c
    load_history_from_file(HISTORY_FILE, history);

    while (1) {
        input = readline("minishell> ");
        if (!input) {
            printf("exit\n");
            break;
        }

        if (*input) {
            add_history(input);          // readline用の履歴に追加
            add_to_history(history, input); // 自前の履歴にも追加
        }

        if (strcmp(input, "history") == 0) {
            for (int i = 0; i < history->count; i++) {
                printf("%d: %s\n", i + 1, history->entries[i]);
            }
        } else {
            // パーサーを使用して入力を解析
            t_linked_list *parsed_input = parser(input);

            // 解析結果を表示
            linked_list_print(parsed_input);

            // リストの解放
            linked_list_free(parsed_input);
        }

        free(input);
    }

    // 履歴を保存
    save_history_to_file(HISTORY_FILE, history);

    // メモリ解放
    free_history(history);
    rl_clear_history();
    return 0;
}

// File: libft.h
/* ************************************************************************** */

#ifndef LIBFT_H
# define LIBFT_H

# include <stddef.h>
# include <stdint.h>
# include <stdlib.h>
# include <unistd.h>
# include <limits.h>

int		ft_isalpha(int c);
int		ft_isdigit(int c);
int		ft_isalnum(int c);
int		ft_isascii(int c);
int		ft_isprint(int c);
size_t	ft_strlen(const char *str);
void	*ft_memset(void *s, int c, size_t n);
void	ft_bzero(void *s, size_t n);
void	*ft_memcpy(void *dest, const void *src, size_t n);
void	*ft_memmove(void *dest, const void *src, size_t n);
size_t	ft_strlcpy(char *dst, const char *src, size_t size);
size_t	ft_strlcat(char *dst, const char *src, size_t size);
int		ft_toupper(int c);
int		ft_tolower(int c);
char	*ft_strchr(const char *s, int c);
char	*ft_strrchr(const char *s, int c);
int		ft_strncmp(const char *s1, const char *s2, size_t n);
void	*ft_memchr(const void *s, int c, size_t n);
int		ft_memcmp(const void *s1, const void *s2, size_t n);
char	*ft_strnstr(const char *big, const char *little, size_t len);
int		ft_atoi(const char *nptr);
void	*ft_calloc(size_t nmemb, size_t size);
char	*ft_strdup(const char *s);
char	*ft_substr(char const *s, unsigned int start, size_t len);
char	*ft_strjoin(char const *s1, char const *s2);
char	*ft_strtrim(char const *s1, char const *set);
char	**ft_split(char const *str, char c);
char	*ft_itoa(int n);
char	*ft_strmapi(char const *s, char (*f)(unsigned int, char));
void	ft_striteri(char *s, void (*f)(unsigned int, char *));
void	ft_putchar_fd(char c, int fd);
void	ft_putstr_fd(char *s, int fd);
void	ft_putendl_fd(char *s, int fd);
void	ft_putnbr_fd(int n, int fd);

#endif


// File: linked_list.h
/* ************************************************************************** */

#ifndef LINKED_LIST_H
# define LINKED_LIST_H

# include <stdio.h>
# include <stdlib.h>
# include <string.h>

typedef enum TokenType
{
	TYPE_DEFAULT = 1,
	TYPE_COMMAND,
	TYPE_PIPE,
	TYPE_REDIRECT_IN,
	TYPE_HEREDOC,
	TYPE_REDIRECT_OUT,
	TYPE_REDIRECT_APPEND
}				TokenType;

typedef struct s_linked_list
{
	char *content;              // moziretu
	TokenType token_type;       // pipe or string or redirect or someting
	struct s_linked_list *next; // next pointer
}				t_linked_list;

t_linked_list	*linked_list_init(t_linked_list *new_node);
void			linked_list_append(t_linked_list *list_head, char *str);
void			linked_list_expansion(t_linked_list *list_head);
void			linked_list_print(t_linked_list *list_head);
void			linked_list_print_with_token(t_linked_list *list_head);
void			linked_list_free(t_linked_list *list_head);
#endif


// File: parser.h
/* ************************************************************************** */

#ifndef PARSER_H
# define PARSER_H

# include "linked_list.h"
# include <stdbool.h>
# include <stdio.h>
# include <string.h>
# include <unistd.h>

bool			is_blank(char c);
int				is_delimeter(char *str);
char			*strdup_len(char *str, size_t n);

char			*delete_blank_start_end(char *input);
size_t			split_len(char *input);
t_linked_list	*parser(char *input);

// expansion.c
bool			is_name_character(char c);
char			*get_env_str(char *str, size_t *len);
void			ft_strcpy(char *dst, char *src);
char			*replace_to_env_val(char *str, char *env_str);
char			*expansion(char *str);

// tokenize.c
TokenType		get_token_type(char *str);
void			linked_list_tokenize(t_linked_list *list_head);

// remove_quote.c
size_t			remove_quote_get_newlen(char *str);
char			*remove_quote(char *str);
t_linked_list	linked_list_remove_quote(t_linked_list *list_head);

#endif


